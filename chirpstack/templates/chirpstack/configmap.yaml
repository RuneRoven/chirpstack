{{- $mqttUsername := ((lookup "v1" "Secret" .Release.Namespace "mqtt-creds").data).username | default "" | b64dec }}
{{- $mqttPassword := ((lookup "v1" "Secret" .Release.Namespace "mqtt-creds").data).password | default "" | b64dec }}

{{- $postgresUser := ((lookup "v1" "Secret" .Release.Namespace "db-creds").data).postgresUser | default "" | b64dec }}
{{- $adminPassword := ((lookup "v1" "Secret" .Release.Namespace "db-creds").data).adminPassword | default "" | b64dec }}
{{- $password := ((lookup "v1" "Secret" .Release.Namespace "db-creds").data).password | default "" | b64dec }}
{{- $role := ((lookup "v1" "Secret" .Release.Namespace "db-creds").data).role | default "" | b64dec }}


apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.chirpstack.volumes.configMap.name | default "chirpstack-configuration" }}
  namespace: {{ .Values._common.namespace | default "chirpstack" }}
data:
  chirpstack.toml: |
    # Logging.
    [logging]

      # Log level.
      #
      # Options are: trace, debug, info, warn error.
      level="{{ ((.Values.chirpstack.config).logging).level | default "info" }}"
      {{ ((.Values.chirpstack.config).logging).extra | default "" | nindent 6 }}

    # PostgreSQL configuration.
    [postgresql]

      # PostgreSQL DSN.
      #
      # Format example: postgres://<USERNAME>:<PASSWORD>@<HOSTNAME>/<DATABASE>?sslmode=<SSLMODE>.
      #
      # SSL mode options:
      #  * disable - Do not use TLS
      #  * prefer - Attempt to connect with TLS but allow sessions without
      #  * require - Require the use of TLS
      {{- if .Values._common.postgres.external.enabled }}
      dsn="postgres://{{ $role }}:{{ $password }}@{{ $.Values._common.postgres.external.host }}/{{ $.Values._common.postgres.settings.dbName }}?sslmode={{ $.Values._common.postgres.settings.sslmode }}"
      {{- else }}
      dsn="postgres://{{ $role }}:{{ $password }}@postgres.{{ .Values._common.namespace }}.svc.cluster.local/{{ $.Values._common.postgres.settings.dbName }}?sslmode={{ $.Values._common.postgres.settings.sslmode }}"
      {{- end }}
      # Max open connections.
      #
      # This sets the max. number of open connections that are allowed in the
      # PostgreSQL connection pool.
      max_open_connections={{ .Values._common.postgres.settings.maxOpenConnections | default 10 }}

      # Min idle connections.
      #
      # This sets the min. number of idle connections in the PostgreSQL connection
      # pool (0 = equal to max_open_connections).
      min_idle_connections={{ .Values._common.postgres.settings.minIdleConnections | default 0 }}
      # CA certificate (optional).
      #
      # Set this to the path of the CA certificate in case you are using TLS and
      # the server-certificate is not signed by a CA in the platform certificate
      # store.
      ca_cert="/etc/ssl/custom/pgca.pem"

      {{ ((.Values.chirpstack.config).postgresql).extra | default "" | nindent 6 }}

    # Redis configuration.
    [redis]

      # Server address or addresses.
      #
      # Set multiple addresses when connecting to a cluster.
      {{- if .Values._common.redis.external.enabled }}
      servers=[
        "redis://{{ $.Values._common.external.redis.host }}:{{ .Values._common.external.redis.port | default 6379 }}/"
      ]
      {{- else }}
      servers=[
        "redis://redis.{{ $.Values._common.namespace }}.svc.cluster.local:{{ .Values.redis.service.port | default 6379}}/"
      ]
      {{- end }}

      # TLS enabled.
      tls_enabled={{ .Values._common.redis.settings.tls | default false}}

      # Redis Cluster.
      #
      # Set this to true when the provided URLs are pointing to a Redis Cluster
      # instance.
      cluster={{ .Values._common.redis.settings.cluster | default false }}

      {{ ((.Values.chirpstack.config).redis).extra | default "" | nindent 6 }}

    # API interface configuration.
    [api]
      # interface:port to bind the API interface to.
      bind="{{ ((.Values.chirpstack.config).api).interface | default "0.0.0.0" }}:{{ ((.Values.chirpstack.config).api).port | default "8080" }}"

      # Secret.
      #
      # This secret is used for generating login and API tokens. Changing this
      # secret will invalidate all login and API tokens.
      secret="{{ ((.Values.chirpstack.config).api).secret | default "iLikePink" }}"
      {{ ((.Values.chirpstack.config).api).extra | default "" |  nindent 6 }}

    # Global gateway configuration.
    # Please note that backend configuration can be found in the per-region
    # configuration.
    [gateway]
      # CA certificate and key file (optional).
      ca_cert="{{ ((.Values.chirpstack.config).gateway).caCert | default "" }}"
      ca_key="{{ ((.Values.chirpstack.config).gateway).caKey | default "" }}"

      # Certificate lifetime.
      client_cert_lifetime="{{ ((.Values.chirpstack.config).gateway).clientCertLiftime | default "11months 30days 3h 50m 24s" }}"

      # Allow unknown gateways.
      allow_unknown_gateways={{ ((.Values.chirpstack.config).gateway).allowUnknownGateways | default false }}

      {{ ((.Values.chirpstack.config).gateway).extra | default "" | nindent 6 }}

    # Network related configuration.
    [network]

      # Network identifier (NetID, 3 bytes) encoded as HEX.
      net_id="{{ ((.Values.chirpstack.config).network).netId | default "000000" }}"

      # Secondary NetIDs.
      {{- if ((.Values.chirpstack.config).network).secondaryNetIds }}
      secondary_net_ids=[
      {{- range $index, $item := ((.Values.chirpstack.config).network).secondaryNetIds }}
        "{{ $item }}"{{ if lt $index (sub (len ((.Values.chirpstack.config).network).secondaryNetIds) 1) }},{{ end }}
      {{- end }}
      ]
      {{- else }}
      secondary_net_ids=[]
      {{- end }}

      # DevAddr prefixes.
      {{- if ((.Values.chirpstack.config).network).devAddrPrefixes }}
      dev_addr_prefixes=[
      {{- range $index, $item := ((.Values.chirpstack.config).network).devAddrPrefixes }}
        "{{ $item }}"{{ if lt $index (sub (len .Values.chirpstack.config.network.devAddrPrefixes) 1) }},{{ end }}
      {{- end }}
      ]
      {{- else }}
      dev_addr_prefixes=[]
      {{- end }}
      # Enabled regions.
      #
      # Multiple regions can be enabled simultaneously. Each region must match
      # the 'name' parameter of the region configuration in '[[regions]]'.
      enabled_regions=[
      {{- range $index, $region := .Values.chirpstack.region }}
            "{{ $region.name }}",
      {{- end }}
      ]

      # Time to wait for uplink de-duplication.
      deduplication_delay="{{ ((.Values.chirpstack.config).network).deduplicationDelay | default "200ms" }}"

      # Get downlink data delay.
      get_downlink_data_delay="{{ ((.Values.chirpstack.config).network).getDownlinkDataDelay | default "100ms" }}"

      # Mac-commands disabled.
      mac_commands_disabled={{ ((.Values.chirpstack.config).network).macCommandsDisabled | default false }}

      # Custom ADR plugins.
      {{- if ((.Values.chirpstack.config).network).adrPlugins }}
      adr_plugins=[
      {{- range $index, $item := .Values.chirpstack.config.network.adrPlugins }}
        "{{ $item }}"{{ if lt $index (sub (len .Values.chirpstack.config.network.adrPlugins) 1) }},{{ end }}
      {{- end }}
      ]
      {{- else }}
      adr_plugins=[]
      {{- end }}

      {{ ((.Values.chirpstack.config).network).extra | default "" | nindent 6 }}

      # Scheduler settings.
      [network.scheduler] 
        # Scheduler interval.
        #
        # The interval in which the downlink scheduler for multicast, Class-B and
        # Class-C runs.
        interval="{{ (((.Values.chirpstack.config).network).scheduler).interval | default "1s" }}"

        # Class-A lock duration.
        #
        # This defines the lock duration between receiving a Class-A uplink and
        # the next scheduler-run for a device. The purpose of this lock is to
        # avoid collisions between Class-A and Class-B/C downlinks.
        class_a_lock_duration="{{ (((.Values.chirpstack.config).network).scheduler).classALockDuration | default "5s" }}"

        # Class-C lock duration.
        #
        # This defines the lock duration between scheduling two Class-C downlink
        # payloads for the same device. The purpose of this lock is to avoid
        # overlap between scheduling Class-C downlinks and / or spreading the 
        # downlink capacity load on the gateway.
        class_c_lock_duration="{{ (((.Values.chirpstack.config).network).scheduler).classCLockDuration | default "5s" }}"

        # Multicast Class-C margin.
        #
        # This defines the minimum margin between scheduling multiple multicast downlinks
        # (within the same multicast-group). This value must be equal or greater than the
        # scheduler interval.
        multicast_class_c_margin="{{ (((.Values.chirpstack.config).network).scheduler).multicastClassCMargin | default "5s" }}"

        # Multicast Class-B margin.
        #
        # This defines the minimum margin between scheduling multiple multicast downlinks
        # (within the same multicast-group). This value must be equal or greater than the
        # scheduler interval.
        multicast_class_b_margin="{{ (((.Values.chirpstack.config).network).scheduler).multicastClassBMargin | default "5s" }}"
        
        {{- (((.Values.chirpstack.config).network).scheduler).extra | default "" | nindent 8 }}

    # Monitoring related configuration. 
    [monitoring]    
      # interface:port to bind the monitoring endpoint to (optional).
      #
      # /health  - Returns 200 in case the healthchecks have passed.
      # /metrics - Returns metrics which can be scraped by Prometheus.
      #
      # If not set, this endpoint will be disabled.
      bind="{{ ((.Values.chirpstack.config).monitoring).bind | default "" }}"

      # Backend Interfaces log max history.
      #
      # This defines the max number of Backend Interface request records that will be persisted
      # in Redis Streams. Setting this value to 0 disables this features.
      backend_interfaces_log_max_history={{ ((.Values.chirpstack.config).monitoring).backendInterfacesLogMaxHistory | default 10 }}

      # Meta-log max history.
      #
      # This defines the max number of meta records that will be persisted in Redis Streams.
      # Setting this value to 0 disables this feature.
      meta_log_max_history={{ ((.Values.chirpstack.config).monitoring).metaLogMaxHistory | default 10 }}

      # Gateway frame-log max history.
      #
      # This defines the max number of frame-log records that will be persisted in Redis Streams.
      # This stream contains the uplink and downlink frames of all gateways.
      # Setting this value to 0 disables this feature.
      gateway_frame_log_max_history={{ ((.Values.chirpstack.config).monitoring).gatewayFrameLogMaxHistory | default 10 }}

      # Device frame-log max history.
      #
      # This defines the max number of frame-log records that will be persisted in Redis Streams.
      # This stream contains the uplink and downlink frames of all devices.
      # Setting this value to 0 disables this feature.
      device_frame_log_max_history={{ ((.Values.chirpstack.config).monitoring).deviceFrameLogMaxHistory | default 10 }}

      # Device event-log max history.
      #
      # This defines the max number of event-log records that will be persisted in Redis Streams.
      # This stream contains the events of all devices.
      # Setting this value to 0 disables this feature.
      device_event_log_max_history={{ ((.Values.chirpstack.config).monitoring).deviceEventLogMaxHistory | default 10 }}

      # Per gateway frame-log max history.
      #
      # Equal to the gateway_frame_log_max_history, but for each gateway a new Redis Stream
      # is created.
      # Setting this value to 0 disables this feature.
      per_gateway_frame_log_max_history={{ ((.Values.chirpstack.config).monitoring).perGatewayFrameLogMaxHistory | default 10 }}

      # Per gateway frame-log TTL.
      #
      # This defines the TTL of the Redis Stream key.
      per_gateway_frame_log_ttl="{{ ((.Values.chirpstack.config).monitoring).perGatewayFrameLogTtl | default "1month 13h 26m 24s" }}"

      # Per device frame-log max history.
      #
      # Equal to the device_frame_log_max_history, but for each device a new Redis Stream
      # is created.
      # Setting this value to 0 disables this feature.
      per_device_frame_log_max_history={{ ((.Values.chirpstack.config).monitoring).perDeviceFrameLogMaxHistory | default 10 }}

      # Per device frame-log TTL.
      #
      # This defines the TTL of the Redis Stream key.
      per_device_frame_log_ttl="{{ ((.Values.chirpstack.config).monitoring).perDeviceFrameLogTtl | default "1month 13h 26m 24s" }}"

      # Per device event-log max history.
      #
      # Equal to the device_event_log_max_history, but for each device a new Redis Stream
      # is created.
      # Setting this value to 0 disables this feature.
      per_device_event_log_max_history={{ ((.Values.chirpstack.config).monitoring).perDeviceEventLogMaxHistory | default 10 }}

      # Per device event-log TTL.
      #
      # This defines the TTL of the Redis Stream key.
      per_device_event_log_ttl="{{ ((.Values.chirpstack.config).monitoring).perDeviceEventLogTtl | default "1month 13h 26m 24s" }}"

      {{- ((.Values.chirpstack.config).monitoring).extra | default "" | nindent 6 }}

    [integration]
      enabled=[
      {{- range $index, $item := and ((.Values.chirpstack.config).integration).enabled }}
        "{{ $item }}"{{ if lt $index (sub (len $.Values.chirpstack.config.integration.enabled) 1) }},{{ end }}
      {{- end }}
      ]

      {{- ((.Values.chirpstack.config).integration).extra | default "" | nindent 6 }}
      [integration.mqtt]
        # Event topic template.
        event_topic="{{ (((.Values.chirpstack.config).integration).mqtt).eventTopic | default "application/{{application_id}}/device/{{dev_eui}}/event/{{event}}" }}"

        # Command topic template.
        # This is the topic on which the MQTT subscribes for receiving (enqueue) commands.
        command_topic="{{ (((.Values.chirpstack.config).integration).mqtt).commandTopic | default "application/{{application_id}}/device/{{dev_eui}}/command/{{command}}"  }}"
        
        json={{ (((.Values.chirpstack.config).integration).mqtt).json | default true }}
        {{- if .Values.chirpstack.useCommonMqttSettings }}
        server="tcp://{{ $.Values._common.mqtt.host | default "127.0.0.1" }}:{{ $.Values._common.mqtt.port | default "1883" }}"
        username="{{ $mqttUsername }}"
        password="{{ $mqttPassword }}"
        qos={{ $.Values._common.mqtt.qos | default 0 }}
        clean_session={{ $.Values._common.mqtt.cleanSession | default false }}
        client_id="{{ $.Values._common.mqtt.clientId | default "chirpstack" }}"
        keep_alive_interval="{{ and .Values._common.mqtt .Values._common.mqtt.keepAliveInterval | default "30s" }}"  
        ca_cert="{{ $.Values._common.mqtt.caCert | default "" }}"
        tls_cert="{{ $.Values._common.mqtt.tlsCert | default "" }}"
        tls_key="{{ $.Values._common.mqtt.tlsKey | default "" }}"
        {{- else }}
        server="{{ (((.Values.chirpstack.config).integration).mqtt).server | default "tcp://127.0.0.1:1883/" }}" 
        username="{{ (((.Values.chirpstack.config).integration).mqtt).username | default "" }}" 
        password="{{ (((.Values.chirpstack.config).integration).mqtt).password | default "" }}"
        qos={{ (((.Values.chirpstack.config).integration).mqtt).mqtt.qos | default 2 }}
        clean_session={{ (((.Values.chirpstack.config).integration).mqtt).cleanSession | default true }}
        client_id={{ (((.Values.chirpstack.config).integration).mqtt).server | default "chirpstack" }}" 
        keep_alive_interval="{{ (((.Values.chirpstack.config).integration).mqtt).keepAliveInterval | default "30s" }}"  
        ca_cert="{{ (((.Values.chirpstack.config).integration).mqtt).caCert | default "" }}"  
        tls_cert="{{ (((.Values.chirpstack.config).integration).mqtt).tlsCert | default "" }}"  
        tls_key="{{ (((.Values.chirpstack.config).integration).mqtt).tlsKey | default "" }}"  
        {{- end }}
        {{- (((.Values.chirpstack.config).integration).mqtt).extra | default "" | nindent 8 }}

        # Configuration for MQTT clients.
        [integration.mqtt.client]

          # CA certificate and key file (optional).
          #
          # If setting the CA certificate and key file options, ChirpStack 
          # will generate client certificates which can be used by the MQTT clients for
          # authentication and authorization. The Common Name of the certificate will
          # be set to the ID of the application.
          #
          # The ca_key is expected to be in PKCS#8 format (you can use openssl to
          # convert to PKCS#8).
          ca_cert="{{ ((((.Values.chirpstack.config).integration).mqtt).client).caCert | default "" }}"  
          ca_key="{{ ((((.Values.chirpstack.config).integration).mqtt).client).caKey | default "" }}"  

          # Certificate lifetime.
          #
          # This defines how long (after generating) the certificate remains valid.
          client_cert_lifetime="{{ ((((.Values.chirpstack.config).integration).mqtt).client).clienctCertLifefime | default "11months 30days 3h 50m 24s" }}"  
      
      # PostgreSQL integration configuration.
      [integration.postgresql]
         
        # PostgreSQL DSN.
        #
        # Format example: postgres://<USERNAME>:<PASSWORD>@<HOSTNAME>/<DATABASE>?sslmode=<SSLMODE>.
        #
        # SSL mode options:
        #  * disable - Do not use TLS
        #  * prefer - Attempt to connect with TLS but allow sessions without
        #  * require - Require the use of TLS
        {{- if (((.Values.chirpstack.config).integration).postgresql).useCustom  }}
        dsn="{{ (((.Values.chirpstack.config).integration).postgresql).dsn | default "postgresql://chirpstack_integration:chirpstack_integration@localhost/chirpstack_integration?sslmode=disable" }}"  
        {{- else if .Values._common.postgres.external.enabled }}
        dsn="postgres://{{ $role }}:{{ $password }}@{{ $.Values._common.postgres.external.host }}/{{ $.Values._common.postgres.settings.dbName }}?sslmode={{ $.Values._common.postgres.settings.sslmode }}"
        {{- else }}
        dsn="postgres://{{ $role }}:{{ $password }}@postgres.{{ .Values._common.namespace }}.svc.cluster.local/{{ $.Values._common.postgres.settings.dbName }}?sslmode={{ $.Values._common.postgres.settings.sslmode }}"
        {{- end }}
        # Max open connections.
        #
        # This sets the max. number of open connections that are allowed in the
        # PostgreSQL connection pool.
        {{- if (((.Values.chirpstack.config).integration).postgresql).useCustom  }}
        max_open_connections={{ (((.Values.chirpstack.config).integration).postgresql).maxOpenConnections | default 10 }}"  
        {{- else }}
        max_open_connections={{ .Values._common.postgres.settings.maxOpenConnections | default 10 }}
        {{- end }}
        # CA certificate (optional).
        #
        # Set this to the path of the CA certificate in case you are using TLS and
        # the server-certificate is not signed by a CA in the platform certificate
        # store.
        {{- if (((.Values.chirpstack.config).integration).postgresql).useCustom  }}
        ca_cert={{ (((.Values.chirpstack.config).integration).postgresql).caCert | default "" }}"  
        {{- else }}
        ca_cert="/etc/ssl/custom/pgca.pem"
        {{- end }}
        {{- (((.Values.chirpstack.config).integration).postgresql).extra | default "" | nindent 8 }}

      [integration.amqp]

        # Server URL.
        #
        # See for a specification of all the possible options:
        # https://www.rabbitmq.com/uri-spec.html
        url="{{ (((.Values.chirpstack.config).integration).amqp).url | default "amqp://guest:guest@localhost:5672" }}"

        # Event routing key.
        #
        # This is the event routing-key template used when publishing device
        # events. Messages will be published to the "amq.topic" exchange.
        event_routing_key="{{ (((.Values.chirpstack.config).integration).amqp).eventRoutingKey | default "application.{{application_id}}.device.{{dev_eui}}.event.{{event}}" }}"

        # Use JSON encoding instead of Protobuf (binary).
        json={{ (((.Values.chirpstack.config).integration).amqp).amqp.json | default true }}

        {{- (((.Values.chirpstack.config).integration).amqp).extra | default "" | nindent 8 }}

      # Kafka integration configuration.
      [integration.kafka]

        # Brokers.
        {{- if (((.Values.chirpstack.config).integration).kafka).brokers }}
        brokers=[
        {{- range $index, $broker := (((.Values.chirpstack.config).integration).kafka).brokers  }}
          "{{ $broker }}"{{ if lt (add $index 1) (len $.Values.chirpstack.config.integration.kafka.brokers) }},{{ end }}
        {{- end }}
        ]
        {{- else }}
        brokers=[
          "localhost:9092"
        ]
        {{- end }}
        # TLS.
        #
        # Set this to true when the Kafka client must connect using TLS to the Broker.
        tls={{ (((.Values.chirpstack.config).integration).kafka).tls | default false }}

        # Topic for events.
        topic="{{ (((.Values.chirpstack.config).integration).kafka).topic | default "chirpstack" }}"

        # Template for keys included in Kafka messages.
        # Kafka uses the key for distributing messages over partitions. You can use
        # this to ensure some subset of messages end up in the same partition, so
        # they can be consumed in-order. And Kafka can use the key for data retention
        # decisions.  A header "event" with the event type is included in each
        # message. There is no need to parse it from the key.
        event_key="{{ (((.Values.chirpstack.config).integration).kafka).eventKey | default "application.{{application_id}}.device.{{dev_eui}}.event.{{event}}" }}"

        # Username (optional).
        username="{{ (((.Values.chirpstack.config).integration).kafka).username | default "" }}"

        # Password.
        password="{{ (((.Values.chirpstack.config).integration).kafka).password | default "" }}"

        # Mechanism.
        #
        # Valid options are:
        # * PLAIN
        # * SCRAM-SHA-256
        # * SCRAM-SHA-512
        mechanism="{{ (((.Values.chirpstack.config).integration).kafka).mechanism | default "PLAIN" }}"

        # Use JSON encoding instead of Protobuf (binary).
        json={{ (((.Values.chirpstack.config).integration).kafka).json | default true }}

        {{- (((.Values.chirpstack.config).integration).kafka).extra | default "" | nindent 8 }}

    # Codec configuration.
    [codec]

      {{- ((.Values.chirpstack.config).codec).extra | default "" | nindent 6 }}

      # JS codec configuration.
      [codec.js]

        # Maximum execution time.
        max_execution_time="{{ (((.Values.chirpstack.config).codec).codecJs).maxExecutionTime | default "100ms" }}"
        {{- (((.Values.chirpstack.config).codec).codecJs).extra | default "" | nindent 8 }}

    # User authentication configuration.
    [user_authentication]

      # Enabled authentication backend.
      #
      # Options are:
      #  * internal       - Internal authentication backend (default).
      #  * openid_connect - OpenID Connect based backend.
      #  * oauth2         - OAuth2 based backend.
      enabled="{{ ((.Values.chirpstack.config).userAuthentication).enabled | default "internal" }}"

      {{- ((.Values.chirpstack.config).userAuthentication).extra | default "" | nindent 6 }}

      # OpenID Connect.
      [user_authentication.openid_connect]

        # Registration enabled.
        #
        # Enabling this will automatically register the user when it is not yet present
        # in the ChirpStack database. There is no registration form as the user information
        # is automatically received using the OpenID Connect provided information.
        # The user will not be associated with any organization, but in order to
        # facilitate the automatic onboarding of users, it is possible to configure a
        # registration callback URL (next config option).
        registration_enabled={{ ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).openidConnect).registrationEnabled | default false }}

        # Registration callback URL.
        #
        # This (optional) endpoint will be called on the registration of the user and
        # can implement the association of the user with an organization, create a new
        # organization, ...
        # ChirpStack will make a HTTP POST call to this endpoint,
        # with the following URL parameters:
        # - user_id, of the newly created user in ChirpStack.
        #
        # The POST body contains a JSON payload with the OpenID Connect UserInfo payload.
        registration_callback_url="{{ ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).openidConnect).registrationCallbackUrl | default "" }}"

        # Provider URL.
        # This is the URL of the OpenID Connect provider.
        # Example: https://auth.example.org
        provider_url="{{ ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).openidConnect).providerUrl | default "" }}"

        # Client ID.
        client_id="{{ ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).openidConnect).clientId | default "" }}"

        # Client secret.
        client_secret="{{ ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).openidConnect).clientSecret | default "" }}"

        # Redirect URL.
        #
        # This must contain the ChirpStack web-interface hostname
        # with '/auth/oidc/callback' path, e.g. https://example.com/auth/oidc/callback.
        redirect_url="{{ ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).openidConnect).redirectUrl | default "" }}"

        # Logout URL.
        #
        # When set, ChirpStack will redirect to this URL instead
        # of redirecting to the login page.
        logout_url="{{ ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).openidConnect).logoutUrl | default "" }}"

        # Login redirect.
        #
        # If set to true, then ChirpStack will immediately redirect to the OAuth2
        # provider for login.
        login_redirect={{ ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).openidConnect).loginRedirect | default false }}

        # Login label.
        #
        # The login label is used in the web-interface login form.
        login_label="{{ ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).openidConnect).loginLabel | default "" }}"

        # Assume e-mail verified.
        #
        # If set to true, then ChirpStack will ignore the email_verified received
        # from the OpenID Connect provider, assuming it will be true. Some
        # providers do not provide this field, in which case setting this value
        # is needed.
        assume_email_verified={{ ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).openidConnect).assumeEmailVerified | default false }}

        # Scopes.
        #
        # This configures the scopes that are used during login. You must at least define
        # "email" and "profile".
        {{- if ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).openidConnect).openidConnect.scopes }}
        scopes=[
        {{- range $index, $scope := (.Values.chirpstack.config.userAuthentication.openidConnect.scopes) }}
          "{{ $scope }}"{{ if lt (add $index 1) (len $.Values.chirpstack.config.userAuthentication.openidConnect.scopes) }},{{ end }}
        {{- end }}
        ]
        {{- else }}
        scopes=[
          "email", "profile"
        ]
        {{- end }}
        {{- ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).openidConnect).extra | default "" | nindent 8 }}

      # OAuth2 backend.
      [user_authentication.oauth2]

        # Provider.
        #
        # Options are:
        #  * clerk
        provider="{{ ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).oauth2).provider | default "" }}"

        # Registration enabled.
        #
        # Enabling this will automatically register the user when it is not yet present
        # in the ChirpStack database. There is no registration form as the user information
        # is automatically received using the OAuth2 provided information.
        # The user will not be associated with any organization, but in order to
        # facilitate the automatic onboarding of users, it is possible to configure a
        # registration callback URL (next config option).
        registration_enabled={{ ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).oauth2).registrationEnabled | default false }}

        # Registration callback URL.
        #
        # This (optional) endpoint will be called on the registration of the user and
        # can implement the association of the user with an organization, create a new
        # organization, ...
        # ChirpStack will make a HTTP POST call to this endpoint,
        # with the following URL parameters:
        # - user_id, of the newly created user in ChirpStack.
        #
        # The POST body contains a JSON payload with the OAuth2 payload.
        registration_callback_url="{{ ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).oauth2).registrationCallbackUrl | default "" }}"

        # OAuth2 client ID.
        client_id="{{ ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).oauth2).clientId | default "" }}"

        # OAuth2 client secret.
        client_secret="{{ ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).oauth2).clientSecret | default "" }}"

        # OAuth2 auth URL.
        auth_url="{{ ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).oauth2).authUrl | default "" }}"

        # OAuth2 token URL.
        token_url="{{ ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).oauth2).tokenUrl | default "" }}"

        # Userinfo URL.
        #
        # This is the URL that ChirpStack will request to receive the user information.
        userinfo_url="{{ ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).oauth2).userinfoUrl | default "" }}"

        # Redirect URL.
        #
        # This must contain the ChirpStack web-interface hostname
        # with '/auth/oauth2/callback' path, e.g. https://example.com/auth/oauth2/callback.
        redirect_url="{{ ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).oauth2).redirectUrl | default "" }}"

        # Logout URL.
        #
        # When set, ChirpStack will redirect to this URL instead
        # of redirecting to the login page.
        logout_url="{{ ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).oauth2).logoutUrl | default "" }}"

        # Login redirect.
        #
        # If set to true, then ChirpStack will immediately redirect to the OAuth2
        # provider for login.
        login_redirect={{ ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).oauth2).loginRedirect | default false }}

        # Login label.
        #
        # The login label is used in the web-interface login form.
        login_label="{{ ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).oauth2).loginLabel | default "" }}"

        # Assume e-mail verified.
        #
        # If set to true, then ChirpStack will ignore the email_verified received
        # from the userinfo URL, assuming it will be true.
        assume_email_verified={{ ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).oauth2).assumeEmailVerified | default false }}

        # Scopes.
        #
        # This configures the scopes that are used during login. You must at least define
        # "email".
        {{ if ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).oauth2).scopes }}
        scopes=[
        {{- range $index, $scope := ( .Values.chirpstack.config.userAuthentication.oauth2.scopes)  }}
          "{{ $scope }}"{{ if lt (add $index 1) (len $.Values.chirpstack.config.userAuthentication.oauth2.scopes) }},{{ end }}
        {{- end }}
        ]
        {{- else }}
        scopes=[
          "email"
        ]
        {{- end }}

        {{- ((((.Values.chirpstack.config).userAuthentication).config.userAuthentication).oauth2).extra | default "" | nindent 8 }}

    [join_server]
        {{- ((.Values.chirpstack.config).joinServer).extra | default "" | nindent 6 }}
        # Per Join Server configuration (this can be repeated).
        #
        # ChirpStack will try to match the Join-Request JoinEUI against each
        # join_eui_prefix in the same order as they appear in the configuration.
        #
        # If you configure a 'catch-all' Join Server, then this entry must appear
        # as the last item in the list.
        #
        # Example:
        # [[join_server.servers]]
        #
        #   # JoinEUI prefix that must be routed to the Join Server.
        #   #
        #   # Example '0102030405060700/56` means that the 56MSB of the
        #   # join_eui_prefix will be used to match against the JoinEUI.
        #   # Thus the following JoinEUI range will be forwarded to the
        #   # configured Join Server:
        #   #   0102030405060700 - 01020304050607ff
        #   join_eui_prefix="0102030405060708/64"
        #
        #   # Server endpoint.
        #   server="https://example.com:1234/join/endpoint"

        #   # Use the async interface scheme.
        #   async_interface=false

        #   # Async interface request timeout.
        #   async_interface_timeout="1s"

        #   # CA certificate (optional).
        #   #
        #   # Set this to validate the join-server server certificate (e.g. if the
        #   # certificate was self-signed).
        #   ca_cert="/path/to/ca.pem"

        #   # TLS client-certificate (optional).
        #   #
        #   # Set this to enable client-certificate authentication with the join-server.
        #   tls_cert="/path/to/tls_cert.pem"

        #   # TLS client-certificate key (optional).
        #   #
        #   # Set this to enable client-certificate authentication with the join-server.
        #   tls_key="/path/to/tls_key.pem"

    # Backend Interfaces configuration (optional).
    [backend_interfaces]

      # interface:port to bind the Backend Interfaces API to.
      #
      # Note: this interface is used both for passive-roaming and when
      # integrating with Join Servers that implement the async interface.
      # Leaving this option blank will disable the Backend Interfaces API,
      # which is fine in most cases.
      bind="{{ ((.Values.chirpstack.config).backendInterfaces).bind | default "" }}"

      # CA certificate (path).
      ca_cert="{{ ((.Values.chirpstack.config).backendInterfaces).caCert | default "" }}"

      # TLS certificate (path).
      tls_cert="{{ ((.Values.chirpstack.config).backendInterfaces).tlsCert | default "" }}"

      # TLS key (PKCS#8) (path).
      tls_key="{{ ((.Values.chirpstack.config).backendInterfaces).tlsKey | default "" }}"
      
      {{- ((.Values.chirpstack.config).backendInterfaces).extra | default "" | nindent 6 }}

    # Roaming configuration.
    [roaming]

      # Resolve NetID domain suffix.
      resolve_net_id_domain_suffix="{{ ((.Values.chirpstack.config).roaming).resolveNetIdDomainSuffix | default "" }}"

      {{- ((.Values.chirpstack.config).roaming).extra | default "" | nindent 6 }}

      # Default roaming server.
      [roaming.default]

        # Enable default roaming server.
        enabled={{ (((.Values.chirpstack.config).roaming).default).enabled | default false }}

        # Async timeout (set to 0 to disable async interface).
        async_timeout="{{ (((.Values.chirpstack.config).roaming).default).asyncTimeout | default "0s" }}"

        # Passive-roaming session lifetime (set to 0 for stateless).
        passive_roaming_lifetime="{{ (((.Values.chirpstack.config).roaming).default).passiveRoamingLifetime | default "0s" }}"
      
        # Passive-roaming KEK label (optional).
        #
        # If set, the session-keys will be encrypted using the given KEK.
        passive_roaming_kek_label="{{ (((.Values.chirpstack.config).roaming).default).passiveRoamingKekLabel | default "" }}"

        # Passive-roaming validate MIC.
        #
        # If set ChirpStack will validate the MIC (for non-stateless roaming
        # agreements). As well it means it will expose the NwkSKey / FNwkSIntKey
        # on PRStartAns.
        passive_roaming_validate_mic={{ (((.Values.chirpstack.config).roaming).default).passiveRoamingValidateMic | default false }}
      
        # Server.
        #
        # If set, this will bypass the DNS resolving of the server.
        server="{{ (((.Values.chirpstack.config).roaming).default).serve  | default "" }}"
      
        # Use target role suffix.
        #
        # Depending the context of the remote server, this will add
        # the /sns or /fns path to the server endpoint.
        use_target_role_suffix={{ (((.Values.chirpstack.config).roaming).default).useTargetRoleSuffix | default false }}
      
        # CA certificate (path).
        ca_cert="{{ (((.Values.chirpstack.config).roaming).default).caCert | default "" }}"
      
        # TLS certificate (path).
        tls_cert="{{ (((.Values.chirpstack.config).roaming).default).tlsCert | default "" }}"
      
        # TLS key (PKCS#8) (path).
        tls_key="{{ (((.Values.chirpstack.config).roaming).default).tlsKey | default "" }}"
      
        # Authorization header.
        #
        # Optional value of the Authorization header, e.g. token or password.
        authorization_header="{{ (((.Values.chirpstack.config).roaming).default).authorizationHeader  | default "" }}"

        {{- (((.Values.chirpstack.config).roaming).default).extra | default "" | nindent 8 }}

      # Per server roaming configuration (this can be repeated).
      # Example:
      # [[roaming.servers]]
      #
      #  # NetID of the roaming server.
      #  net_id="010203"
      #
      #  # Async timeout (set to 0 to disable async interface).
      #  async_timeout="0s"
      #
      #  # Passive-roaming session lifetime (set to 0 for stateless).
      #  passive_roaming_lifetime="0s"
      #
      #  # Passive-roaming KEK label (optional).
      #  #
      #  # If set, the session-keys will be encrypted using the given KEK.
      #  passive_roaming_kek_label=""

      #  # Passive-roaming validate MIC.
      #  #
      #  # If set ChirpStack will validate the MIC (for non-stateless roaming
      #  # agreements). As well it means it will expose the NwkSKey / FNwkSIntKey
      #  # on PRStartAns.
      #  passive_roaming_validate_mic=false
      #
      #  # Server.
      #  #
      #  # If set, this will bypass the DNS resolving of the server.
      #  server="https://example.com:1234"
      #
      #  # Use target role suffix.
      #  #
      #  # Depending the context of the remote server, this will add
      #  # the /sns or /fns path to the server endpoint.
      #  use_target_role_suffix=false
      #
      #  # CA certificate (path).
      #  ca_cert=""
      #
      #  # TLS certificate (path).
      #  tls_cert=""
      #
      #  # TLS key (PKCS#8) (path).
      #  tls_key=""
      #
      #  # Authorization header.
      #  #
      #  # Optional value of the Authorization header, e.g. token or password.
      #  authorization_header=""


    # Key encryption keys (KEKs).
    #
    # KEKs can be used to encrypt session-keys between two endpoints,
    # for example a Join Server and Network Server, or between two
    # Network Servers in case of a roaming agreement. If used, the
    # sender will encrypt the session-key with the KEK and indicates
    # to the receiver the label of the KEK that was used for encryption,
    # such that the receiver is able to decrypt the session-key.
    #
    # Example (can be repeated):
    # [[keks]]
    #
    #   # KEK label.
    #   label="kek-label"

    #   # Encryption key.
    #   kek="01020304050607080102030405060708"

    # UI configuration.
    [ui]
      # Tileserver URL.
      #
      # This configures the tileserver used in the UI to display maps.
      # The default value uses the OSM tiles.
      tileserver_url="{{ ((.Values.chirpstack.config).ui).tileserver | default "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" }}"

      # Map attribution.
      #
      # This configures the map attribution. The default attribution relates to the
      # default tileserver_url (OSM). If you configure a different tile-server, you
      # might need to update the map_attribution.
      map_attribution="{{ ((.Values.chirpstack.config).ui).mapAttribution | default "&copy; <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors" }}"

      {{- ((.Values.chirpstack.config).ui).extra | default "" | nindent 6 }}

    {{- if (.Values.chirpstack.config).extra }}
    {{ .Values.chirpstack.config.extra | default ""  | nindent 4 }}
    {{- end }}
{{- range $index, $region := .Values.chirpstack.region }}
  region_{{ $region.name }}.toml: |
    {{- $filePath := printf "configurations/region_%s.toml" $region.name }}

    # This file contains an example configuration.
    [[regions]]
      # ID is an user-defined identifier for this region.
      name="{{ $region.name }}"

      # Description is a short description for this region.
      description = "{{ upper $region.name }}"

      # Common-name refers to the common-name of this region as defined by
      # the LoRa Alliance.
      common_name="{{ upper $region.name }}"

      # User-defined region information.
      #
      # This information will be displayed on top of the region page in then
      # ChirpStack web-interface. For example, it can contain information about
      # how users should connect their gateways when using this region (e.g. MQTT
      # end-point, MQTT topic prefix, TLS configuration etc). Markdown syntax can
      # be used for formatting.
      user_info = ""


      # Gateway configuration.
      [regions.gateway]

        # Force gateways as private.
        #
        # If enabled, gateways can only be used by devices under the same tenant.
        force_gws_private={{ ((($region).settings).gateway).private | default false }}

        # Gateway backend configuration.
        [regions.gateway.backend]

          # The enabled backend type.
          enabled="{{ ((($region).settings).gateway).enabledBackend | default "mqtt" }}"

          # MQTT configuration.
          [regions.gateway.backend.mqtt]

            topic_prefix = "{{ ((((($region).settings).gateway).backend).mqtt).topicPrefix | default $region.name }}"

            {{- if $.Values.chirpstack.useCommonMqttSettings }}
            server = "tcp://{{ $.Values._common.mqtt.host | default "127.0.0.1" }}:{{ $.Values._common.mqtt.port | default "1883" }}"
            username = "{{ $mqttUsername }}"
            password = "{{ $mqttPassword }}"
            qos = {{ $.Values._common.mqtt.qos | default 0 }}
            clean_session = {{ $.Values._common.mqtt.cleanSession | default false }}
            client_id = "{{ $.Values._common.mqtt.clientId | default "chirpstack" }}"
            keep_alive_interval="{{ and $.Values._common.mqtt $.Values._common.mqtt.keepAliveInterval | default "30s" }}"  
            ca_cert="{{ $.Values._common.mqtt.caCert | default "" }}"
            tls_cert="{{ $.Values._common.mqtt.tlsCert | default "" }}"
            tls_key="{{ $.Values._common.mqtt.tlsKey | default "" }}"
            {{- else }}
            server="{{ ((((($region).settings).gateway).backend).mqtt).server | default "tcp://127.0.0.1:1883/" }}" 
            username = "{{ ((((($region).settings).gateway).backend).mqtt).username | default "" }}" 
            password = "{{ ((((($region).settings).gateway).backend).mqtt).password | default "" }}"
            qos = {{ ((((($region).settings).gateway).backend).mqtt).qos | default 2 }}
            clean_session = {{ ((((($region).settings).gateway).backend).mqtt).cleanSession | default true }}
            client_id = #{{ ((((($region).settings).gateway).backend).mqtt).server | default "chirpstack" }}" 
            keep_alive_interval="{{ ((((($region).settings).gateway).backend).mqtt).keepAliveInterval | default "30s" }}"  
            ca_cert = "{{ ((((($region).settings).gateway).backend).mqtt).caCert | default "" }}"  
            tls_cert = "{{ ((((($region).settings).gateway).backend).mqtt).tlsCert | default "" }}"  
            tls_key = "{{ ((((($region).settings).gateway).backend).mqtt).tlsKey | default "" }}"  
            {{- end }}


        # Gateway channel configuration.
        #
        # Note: this configuration is only used in case the gateway is using the
        # ChirpStack Concentratord daemon. In any other case, this configuration 
        # is ignored.
        {{- $regionData := $.Files.Get (printf "configurations/region_%s.json" $region.name) | fromJson }}
        {{- if $regionData.regions }}
        {{- range $region := $regionData.regions }}
        {{- if $region.gateway }}
        {{- if $region.gateway.channels }}  # Check if channels exists in gateway
        {{- range $channel := $region.gateway.channels }}
        [[regions.gateway.channels]]
        {{- range $key, $value := $channel }}
          {{ $key }}={{ toJson $value }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}

        

      [regions.network]
        
        # Installation margin (dB) used by the ADR engine.
        #
        # A higher number means that the network-server will keep more margin,
        # resulting in a lower data-rate but decreasing the chance that the
        # device gets disconnected because it is unable to reach one of the
        # surrounded gateways.
        installation_margin={{ ((($region).settings).gateway).installationMargin | default 10 }}

        # RX window (Class-A).
        #
        # Set this to:
        # 0: RX1 / RX2
        # 1: RX1 only
        # 2: RX2 only
        rx_window={{ ((($region).settings).gateway).rxWindow | default 0 }}

        # RX1 delay (1 - 15 seconds).
        rx1_delay={{ ((($region).settings).gateway).rx1Delay | default 1 }}

        # RX1 data-rate offset
        rx1_dr_offset={{ ((($region).settings).gateway).rx1DrOffset | default 0 }}

        # RX2 data-rate
        rx2_dr={{ ((($region).settings).gateway).rx2Dr | default 0 }}

        # RX2 frequency (Hz)
        {{- $regionData := $.Files.Get (printf "configurations/region_%s.json" $region.name) | fromJson }}
        {{- if $regionData.regions }}
        {{- range $region := $regionData.regions }}
        {{- if (($region).network).rx2_frequency }}
        rx2_frequency={{ toJson $region.network.rx2_frequency }}
        {{- end }}
        {{- end }}
        {{- end }}

        # Prefer RX2 on RX1 data-rate less than.
        #
        # Prefer RX2 over RX1 based on the RX1 data-rate. When the RX1 data-rate
        # is smaller than the configured value, then the Network Server will
        # first try to schedule the downlink for RX2, failing that (e.g. the gateway
        # has already a payload scheduled at the RX2 timing) it will try RX1.
        rx2_prefer_on_rx1_dr_lt={{ ((($region).settings).gateway).rx2PreferOnRx1DrLt | default 0 }}

        # Prefer RX2 on link budget.
        #
        # When the link-budget is better for RX2 than for RX1, the Network Server will first
        # try to schedule the downlink in RX2, failing that it will try RX1.
        rx2_prefer_on_link_budget={{ ((($region).settings).gateway).rx2PreferOnLinkBudget | default false }}

        # Downlink TX Power (dBm)
        #
        # When set to -1, the downlink TX Power from the configured band will
        # be used.
        #
        # Please consult the LoRaWAN Regional Parameters and local regulations
        # for valid and legal options. Note that the configured TX Power must be
        # supported by your gateway(s).
        downlink_tx_power={{ ((($region).settings).gateway).downlinkTxPower | default -1 }}

        # ADR is disabled.
        adr_disabled={{ ((($region).settings).gateway).adrDisabled | default false }}

        # Minimum data-rate.
        min_dr={{ ((($region).settings).gateway).minDr | default 0 }}

        # Maximum data-rate.
        max_dr={{ ((($region).settings).gateway).max_dr | default 5 }}


        # Rejoin-request configuration (LoRaWAN 1.1)
        [regions.network.rejoin_request]

          # Request devices to periodically send rejoin-requests.
          enabled={{ (((($region).settings).network).rejoinRequest).enabled | default false }}

          # The device must send a rejoin-request type 0 at least every 2^(max_count_n + 4)
          # uplink messages. Valid values are 0 to 15.
          max_count_n={{ (((($region).settings).network).rejoinRequest).maxCount | default 0 }}

          # The device must send a rejoin-request type 0 at least every 2^(max_time_n + 10)
          # seconds. Valid values are 0 to 15.
          #
          # 0  = roughly 17 minutes
          # 15 = about 1 year
          max_time_n={{ (((($region).settings).network).rejoinRequest).maxTime | default 0 }}
        

        # Class-B configuration.
        [regions.network.class_b]

          # Ping-slot data-rate. 
          ping_slot_dr={{ (((($region).settings).network).classB).pingSlotDr | default 0 }}

          # Ping-slot frequency (Hz)
          #
          # set this to 0 to use the default frequency plan for the configured region
          # (which could be frequency hopping).
          ping_slot_frequency={{ (((($region).settings).network).classB).pingSlotFrequency | default 0 }}
        
        # Below is the common set of extra channels. Please make sure that these
        # channels are also supported by the gateways.
        {{- $regionData := $.Files.Get (printf "configurations/region_%s.json" $region.name) | fromJson }}
        {{- if $regionData.regions }}
        {{- range $region := $regionData.regions }}
        {{- if $region.network }}
        {{- if $region.network.extra_channels }}  # Check if channels exists in gateway
        {{- range $channel := $region.network.extra_channels }}
        [[regions.network.extra_channels]]
        {{- range $key, $value := $channel }}
          {{ $key }}={{ toJson $value }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
{{- end }}
